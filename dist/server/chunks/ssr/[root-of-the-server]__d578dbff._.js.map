{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///home/carveri/2025/sep/roudev/src/app/%28Front%29/%28Private%29/dashboard/%5BComponents%5D/PageLayout.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(Front)/(Private)/dashboard/[Components]/PageLayout.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(Front)/(Private)/dashboard/[Components]/PageLayout.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmU,GAChW,iGACA","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///home/carveri/2025/sep/roudev/src/app/%28Front%29/%28Private%29/dashboard/%5BComponents%5D/PageLayout.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(Front)/(Private)/dashboard/[Components]/PageLayout.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(Front)/(Private)/dashboard/[Components]/PageLayout.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+S,GAC5U,6EACA","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///home/carveri/2025/sep/roudev/src/app/%28Back%29/libs/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient()\n}\n\ndeclare global {\n  var prismaGlobal: undefined | ReturnType<typeof prismaClientSingleton>\n}\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,6HAAA,CAAA,eAAY;AACzB;AAMA,MAAM,SAAS,WAAW,YAAY,IAAI;uCAE3B;AAEf,wCAA2C,WAAW,YAAY,GAAG","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///home/carveri/2025/sep/roudev/src/app/%28Back%29/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\n\nimport NextAuth from \"next-auth/next\"\nimport type { AuthOptions, NextAuthOptions } from \"next-auth\";\n// import { PrismaAdapter } from \"@auth/prisma-adapter\";\n// import { Adapter } from \"next-auth/adapters\";\n// import GithubProvider from \"next-auth/providers/github\";\n//import prisma from \"@/libs/prisma\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\nimport prisma from \"@/app/(Back)/libs/prisma\";\n\n\nexport const authOptions: AuthOptions = {\n    //adapter: PrismaAdapter(prisma) as Adapter,\n\n    providers: [\n        // GithubProvider({\n        //   clientId: process.env.GITHUB_ID ?? '',\n        //   clientSecret: process.env.GITHUB_SECRET ?? ''\n        // })\n        CredentialsProvider({\n          name: \"Credentials\",\n          credentials: {\n            email: { label: \"Email\", type: \"email\", placeholder: \"jsmith@gmail.com\" },\n            password: { label: \"Contrase√±a\", type: \"password\", placeholder: \"***********\" },\n            \n          },\n          async authorize(credentials:any) {\n            \n            const userFound:any = await prisma.user.findUnique({\n              where: {\n                email: credentials?.email\n              }\n           \n            })\n            if(!userFound) return null\n            \n            \n            const matchpassword = await bcrypt.compare(credentials?.password, userFound?.password)\n            if(!matchpassword) return null\n            //console.log('usuarioEncontrado:', userFound);\n            \n            return {\n              id: userFound.id,\n              name: userFound.primerNombre,\n              email: userFound.email,\n              // name: userFound?.cargo?.departamento?.areaId,\n              // image: userFound.cargoId,\n              // cosa: 'olis'\n              //empresa: userFound.empresa,\n              //cargo: 'sdsd'\n            }\n          }\n        })\n        \n        \n      ],\n      pages: {\n        signIn: \"/api/auth/login\",\n        signOut: \"/sign-out\"\n      },\n      session: {\n        strategy: 'jwt'\n      },\n      callbacks:{\n        async signIn({}){\n          return true\n        },\n\n        async jwt({ token }){\n          \n          const dbUser = await prisma.user.findUnique({\n            where:{\n              email: token.email ?? 'No hay email'\n            }\n          })\n          if(dbUser?.isActive === false){\n            throw Error('El usuario no esta activo!!')\n          }\n\n          token.id = dbUser?.id ?? 'no-uuid'\n          token.apellidoPaterno = dbUser?.apellidoPaterno ?? 'eliminado' \n          // token.isActivo = dbUser.isActive ?? true\n\n          \n          \n          return token\n        },\n        async session({ session, token }:any){\n\n          if(session && session.user){\n            session.user.id = token.id\n            session.user.apellidoPaterno = token.apellidoPaterno\n          }\n          return session\n        }\n      }\n}\n      \n\nconst handler = NextAuth(authOptions);\nexport {handler as GET, handler as POST}\n\n//export default NextAuth(authOptions)"],"names":[],"mappings":";;;;;AAEA;AAEA,wDAAwD;AACxD,gDAAgD;AAChD,2DAA2D;AAC3D,qCAAqC;AACrC;AACA;AACA;;;;;AAGO,MAAM,cAA2B;IACpC,4CAA4C;IAE5C,WAAW;QACP,mBAAmB;QACnB,2CAA2C;QAC3C,kDAAkD;QAClD,KAAK;QACL,CAAA,GAAA,wJAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAS,aAAa;gBAAmB;gBACxE,UAAU;oBAAE,OAAO;oBAAc,MAAM;oBAAY,aAAa;gBAAc;YAEhF;YACA,MAAM,WAAU,WAAe;gBAE7B,MAAM,YAAgB,MAAM,wIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACjD,OAAO;wBACL,OAAO,aAAa;oBACtB;gBAEF;gBACA,IAAG,CAAC,WAAW,OAAO;gBAGtB,MAAM,gBAAgB,MAAM,iIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,aAAa,UAAU,WAAW;gBAC7E,IAAG,CAAC,eAAe,OAAO;gBAC1B,+CAA+C;gBAE/C,OAAO;oBACL,IAAI,UAAU,EAAE;oBAChB,MAAM,UAAU,YAAY;oBAC5B,OAAO,UAAU,KAAK;gBAMxB;YACF;QACF;KAGD;IACD,OAAO;QACL,QAAQ;QACR,SAAS;IACX;IACA,SAAS;QACP,UAAU;IACZ;IACA,WAAU;QACR,MAAM,QAAO,EAAE;YACb,OAAO;QACT;QAEA,MAAM,KAAI,EAAE,KAAK,EAAE;YAEjB,MAAM,SAAS,MAAM,wIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC1C,OAAM;oBACJ,OAAO,MAAM,KAAK,IAAI;gBACxB;YACF;YACA,IAAG,QAAQ,aAAa,OAAM;gBAC5B,MAAM,MAAM;YACd;YAEA,MAAM,EAAE,GAAG,QAAQ,MAAM;YACzB,MAAM,eAAe,GAAG,QAAQ,mBAAmB;YACnD,2CAA2C;YAI3C,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAM;YAElC,IAAG,WAAW,QAAQ,IAAI,EAAC;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,eAAe,GAAG,MAAM,eAAe;YACtD;YACA,OAAO;QACT;IACF;AACN;AAGA,MAAM,UAAU,CAAA,GAAA,6IAAA,CAAA,UAAQ,AAAD,EAAE;;CAGzB,sCAAsC","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///home/carveri/2025/sep/roudev/src/app/%28Front%29/%28Private%29/dashboard/layout.tsx"],"sourcesContent":["import { getServerSession } from \"next-auth\";\nimport PageLayout from \"./[Components]/PageLayout\";\nimport { authOptions } from \"../../../(Back)/api/auth/[...nextauth]/route\";\nimport { redirect } from \"next/navigation\";\n\nexport const metadata = {\n  title: \"Dashboard-sep\",\n  description: \"Gestiona bien tu startUp\",\n};\n\n\nexport default async function RootLayout({children,}: Readonly<{children: React.ReactNode;}>) \n{\n  const session = await getServerSession(authOptions)\n  \n  return <div>\n  {session?.user ? \n    <div className=\"h-[95%] w-full \">\n      <PageLayout\n      children1={children}\n      session={session}\n      \n      />\n    </div>\n  \n:redirect('/api/auth/login')}\n      \n </div>       \n}\n  \n\n\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAAA;;;;;;AAEO,MAAM,WAAW;IACtB,OAAO;IACP,aAAa;AACf;AAGe,eAAe,WAAW,EAAC,QAAQ,EAA0C;IAE1F,MAAM,UAAU,MAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,oKAAA,CAAA,cAAW;IAElD,qBAAO,8OAAC;kBACP,SAAS,qBACR,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC,oLAAA,CAAA,UAAU;gBACX,WAAW;gBACX,SAAS;;;;;;;;;;mBAKd,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;;;;;;AAGV","debugId":null}}]
}